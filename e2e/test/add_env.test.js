/*
 * DO NOT EDIT!
 * This file was automatically generated by ark.
 */

const { chromium } = require('playwright');
const { test, expect } = require('@playwright/test');

(async () => {
  const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  const browser = await chromium.launch({
    headless: false,
    devtools: true,
  });
  const context = await browser.newContext();
  // * 打开新标签页
  const page = await context.newPage();

  // * 跳转至该地址: http://localhost:4200
  await page.goto('http://localhost:4200');

  await page.evaluateHandle(async () => {
    const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    await wait(500);

    let yline = 0;

    const findJSPathElement = (path) => {
      if (!path) {
        throw new Error('No JSPath');
      }
      return [document.querySelector(path)];
    };
    const findSelectElement = (label = '') => {
      const select = Array.from(document.querySelectorAll('select'));
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value.includes(label));
      return select.concat(input);
    };
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) => it.innerText.includes(label));
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label));
      return btn.concat(input);
    };
    const findInputElement = (value = '') => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value === value);
    };
    const findTextElement = (label = null) => {
      if (!label) {
        throw new Error("Function findtextElement has' t no args.");
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.indexOf(label) >= 0);
    };
    const findImgElement = () => {
      const svg = Array.from(document.getElementsByTagName('svg'));
      const img = Array.from(document.getElementsByTagName('img'));
      return svg.concat(img);
    };

    const highlightElement = (el, { color } = {}) => {
      const { left, width, height, top } = el.getBoundingClientRect();
      const div = document.createElement('div');
      div.style.position = 'fixed';
      div.style.left = left + 'px';
      div.style.top = top - 3 + 'px';
      div.style.height = height + 'px';
      div.style.width = width + 'px';
      div.style.border = `3px solid ${color || '#a22041'}`;
      div.style.zIndex = 99999;
      div.style.pointerEvents = 'none';
      document.body.appendChild(div);
      setTimeout(() => {
        document.body.removeChild(div);
      }, 300);
    };

    const getElementCoor = (el, coor) => {
      if (!el) {
        throw new Error('element is undefined or null.');
      }
      const { left, right, top, bottom } = el.getBoundingClientRect();
      if (coor === 'center') {
        return left + (right - left);
      }
      if (coor === 'middle') {
        return top + (bottom - top);
      }
      if (coor === 'left') {
        return left;
      }
      if (coor === 'right') {
        return right;
      }
    };
    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().right;
    };
    const distanceY = (a, b) => {
      return Math.abs(getElementCoor(a, 'middle') - getElementCoor(b, 'middle'));
    };
    const filterYaxis = (el, line) => {
      const { top, width, height } = el.getBoundingClientRect();
      if (width === 0 || height === 0) {
        return false;
      }
      return top > line;
    };
    const countYline = (list) => {
      const len = list.length;
      return (
        list
          .map((it) => {
            const { top, bottom } = it.getBoundingClientRect();
            return top + (bottom - top);
          })
          .reduce((a, b) => a + b) / len
      );
    };

    const filterBeforeDiff = (list, yline) => {
      if (list.length === 1) {
        return list;
      }
      const cache = list.map((it) => {
        return it
          .sort((a, b) => {
            const left1 = getElementCoor(a, 'left');
            const left2 = getElementCoor(b, 'left');
            return left1 - left2;
          })
          .filter((item) => getElementCoor(item, 'middle') > yline);
      });
      let left = getElementCoor(cache[0][0], 'left');
      const cacheFilterLeft = cache.map((it, index) => {
        if (it.length === 1 || index === 0) {
          return it;
        }
        const res = it.filter((item) => getElementCoor(item, 'left') > left);
        left = getElementCoor(res[0], 'left');
        return res;
      });
      let right = getElementCoor(cacheFilterLeft.slice(-1)[0].slice(-1)[0], 'right');
      const result = cacheFilterLeft
        .reverse()
        .map((it, index) => {
          if (it.length === 1 || index === 0) {
            return it;
          }
          const res = it.filter((item) => getElementCoor(item, 'right') < right);
          right = getElementCoor(res.slice(-1)[0], 'right');
          return res;
        })
        .reverse();
      return result;
    };
    const diffXY = (list, yline, data) => {
      if (list.length === 0) {
        throw new Error("Has't any element in args");
      }
      const score = list.map((it) => Array(it.length).fill(0));
      if (list.length === 1) {
        if (list[0].length === 0) {
          console.log('diffXY', data);
          throw new Error(
            '\u4F60\u4F20\u5165\u4E86\u7A7A\u6570\u7EC4\uFF0C\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u5143\u7D20'
          );
        }
        if (list[0].length === 1) {
          return [0];
        }
      }
      const scoreList = ['DOM', 'Yline', 'Y', 'X'];
      scoreList.forEach((itm, itIndex) => {
        let scoreUnit = itIndex + 1;
        let index = 0;
        if (itm === 'Yline') {
          let scoreCache = 1;
          let distanceCache = 0;
          list.forEach((item, index2) => {
            item.forEach((it, i) => {
              const distance = it.getBoundingClientRect().top - yline;
              if (distance > 0) {
                if (distanceCache === 0) {
                  distanceCache = distance;
                }
                if (distance <= distanceCache) {
                  distanceCache = distance;
                  score[index2][i] += scoreCache;
                  scoreCache++;
                }
              }
            });
          });
        }
        if (itm === 'Y') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2);
            let distanceCache = 0;
            aList.forEach((left, i) => {
              let scoreCache = 1;
              bList.forEach((right, j) => {
                const distance = distanceY(left, right);
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance;
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance;
                    score[index][i] += scoreCache;
                    score[index + 1][j] += scoreCache;
                    scoreCache += 1;
                  }
                }
              });
            });
            index++;
          }
        }
        if (itm === 'X') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2);
            let distanceCache = 0;
            let scoreCache = 1;
            aList.forEach((left, i) => {
              bList.forEach((right, j) => {
                const distance = distanceX(left, right);
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance;
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance;
                    score[index][i] += scoreCache * scoreUnit;
                    score[index + 1][j] += scoreCache * scoreUnit;
                    scoreCache += 1;
                  }
                }
              });
            });
            index++;
          }
        }
      });
      const findTarget = (list2) => list2.indexOf(Math.max(...list2));
      return score.map(findTarget);
    };

    var el = filterBeforeDiff(
      [
        findImgElement().filter((it) => filterYaxis(it, yline)),
        findTextElement('API').filter((it) => filterYaxis(it, yline)),
        findImgElement().filter((it) => filterYaxis(it, yline)),
        findSelectElement().filter((it) => filterYaxis(it, yline)),
        findImgElement().filter((it) => filterYaxis(it, yline)),
      ],
      yline
    );
    var scoreX = diffXY(el, yline, [
      { element: 'img', value: '', nick: '' },
      { element: 'label', value: "'API'", nick: '' },
      { element: 'img', value: '', nick: '' },
      { element: 'select', value: '', nick: 'sel' },
      { element: 'img', value: '', nick: '' },
    ]);

    const sel = el[3][scoreX[3]];
    if (!sel) {
      throw new Error("Can't find the element: sel");
    }
    sel.setAttribute('data-e2e-id', '5z7tiy');
    highlightElement(sel);

    yline = countYline([el[0][scoreX[0]], el[1][scoreX[1]], el[2][scoreX[2]], el[3][scoreX[3]], el[4][scoreX[4]]]);

    return null;
  });
  var sel = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='5z7tiy']"));

  await sel.click();
  await wait(200);
  const aj9k6la = await page.locator('text=管理环境');
  await aj9k6la.hover();
  await aj9k6la.click();

  // * 等待 800 毫秒
  await wait(800);

  await page.evaluateHandle(async () => {
    const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    await wait(500);

    let yline = 0;

    const findJSPathElement = (path) => {
      if (!path) {
        throw new Error('No JSPath');
      }
      return [document.querySelector(path)];
    };
    const findSelectElement = (label = '') => {
      const select = Array.from(document.querySelectorAll('select'));
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value.includes(label));
      return select.concat(input);
    };
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) => it.innerText.includes(label));
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label));
      return btn.concat(input);
    };
    const findInputElement = (value = '') => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value === value);
    };
    const findTextElement = (label = null) => {
      if (!label) {
        throw new Error("Function findtextElement has' t no args.");
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.indexOf(label) >= 0);
    };
    const findImgElement = () => {
      const svg = Array.from(document.getElementsByTagName('svg'));
      const img = Array.from(document.getElementsByTagName('img'));
      return svg.concat(img);
    };

    const highlightElement = (el, { color } = {}) => {
      const { left, width, height, top } = el.getBoundingClientRect();
      const div = document.createElement('div');
      div.style.position = 'fixed';
      div.style.left = left + 'px';
      div.style.top = top - 3 + 'px';
      div.style.height = height + 'px';
      div.style.width = width + 'px';
      div.style.border = `3px solid ${color || '#a22041'}`;
      div.style.zIndex = 99999;
      div.style.pointerEvents = 'none';
      document.body.appendChild(div);
      setTimeout(() => {
        document.body.removeChild(div);
      }, 300);
    };

    const getElementCoor = (el, coor) => {
      if (!el) {
        throw new Error('element is undefined or null.');
      }
      const { left, right, top, bottom } = el.getBoundingClientRect();
      if (coor === 'center') {
        return left + (right - left);
      }
      if (coor === 'middle') {
        return top + (bottom - top);
      }
      if (coor === 'left') {
        return left;
      }
      if (coor === 'right') {
        return right;
      }
    };
    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().right;
    };
    const distanceY = (a, b) => {
      return Math.abs(getElementCoor(a, 'middle') - getElementCoor(b, 'middle'));
    };
    const filterYaxis = (el, line) => {
      const { top, width, height } = el.getBoundingClientRect();
      if (width === 0 || height === 0) {
        return false;
      }
      return top > line;
    };
    const countYline = (list) => {
      const len = list.length;
      return (
        list
          .map((it) => {
            const { top, bottom } = it.getBoundingClientRect();
            return top + (bottom - top);
          })
          .reduce((a, b) => a + b) / len
      );
    };

    const filterBeforeDiff = (list, yline) => {
      if (list.length === 1) {
        return list;
      }
      const cache = list.map((it) => {
        return it
          .sort((a, b) => {
            const left1 = getElementCoor(a, 'left');
            const left2 = getElementCoor(b, 'left');
            return left1 - left2;
          })
          .filter((item) => getElementCoor(item, 'middle') > yline);
      });
      let left = getElementCoor(cache[0][0], 'left');
      const cacheFilterLeft = cache.map((it, index) => {
        if (it.length === 1 || index === 0) {
          return it;
        }
        const res = it.filter((item) => getElementCoor(item, 'left') > left);
        left = getElementCoor(res[0], 'left');
        return res;
      });
      let right = getElementCoor(cacheFilterLeft.slice(-1)[0].slice(-1)[0], 'right');
      const result = cacheFilterLeft
        .reverse()
        .map((it, index) => {
          if (it.length === 1 || index === 0) {
            return it;
          }
          const res = it.filter((item) => getElementCoor(item, 'right') < right);
          right = getElementCoor(res.slice(-1)[0], 'right');
          return res;
        })
        .reverse();
      return result;
    };
    const diffXY = (list, yline, data) => {
      if (list.length === 0) {
        throw new Error("Has't any element in args");
      }
      const score = list.map((it) => Array(it.length).fill(0));
      if (list.length === 1) {
        if (list[0].length === 0) {
          console.log('diffXY', data);
          throw new Error(
            '\u4F60\u4F20\u5165\u4E86\u7A7A\u6570\u7EC4\uFF0C\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u5143\u7D20'
          );
        }
        if (list[0].length === 1) {
          return [0];
        }
      }
      const scoreList = ['DOM', 'Yline', 'Y', 'X'];
      scoreList.forEach((itm, itIndex) => {
        let scoreUnit = itIndex + 1;
        let index = 0;
        if (itm === 'Yline') {
          let scoreCache = 1;
          let distanceCache = 0;
          list.forEach((item, index2) => {
            item.forEach((it, i) => {
              const distance = it.getBoundingClientRect().top - yline;
              if (distance > 0) {
                if (distanceCache === 0) {
                  distanceCache = distance;
                }
                if (distance <= distanceCache) {
                  distanceCache = distance;
                  score[index2][i] += scoreCache;
                  scoreCache++;
                }
              }
            });
          });
        }
        if (itm === 'Y') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2);
            let distanceCache = 0;
            aList.forEach((left, i) => {
              let scoreCache = 1;
              bList.forEach((right, j) => {
                const distance = distanceY(left, right);
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance;
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance;
                    score[index][i] += scoreCache;
                    score[index + 1][j] += scoreCache;
                    scoreCache += 1;
                  }
                }
              });
            });
            index++;
          }
        }
        if (itm === 'X') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2);
            let distanceCache = 0;
            let scoreCache = 1;
            aList.forEach((left, i) => {
              bList.forEach((right, j) => {
                const distance = distanceX(left, right);
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance;
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance;
                    score[index][i] += scoreCache * scoreUnit;
                    score[index + 1][j] += scoreCache * scoreUnit;
                    scoreCache += 1;
                  }
                }
              });
            });
            index++;
          }
        }
      });
      const findTarget = (list2) => list2.indexOf(Math.max(...list2));
      return score.map(findTarget);
    };

    var el = filterBeforeDiff([findTextElement('环境名称').filter((it) => filterYaxis(it, yline))], yline);
    var scoreX = diffXY(el, yline, [{ element: 'label', value: "'环境名称'", nick: 'jjj' }]);
    const jjj = el[0][scoreX[0]];
    if (!jjj) {
      throw new Error("Can't find the element: jjj");
    }
    jjj.setAttribute('data-e2e-id', '08mgfj');
    highlightElement(jjj);

    yline = countYline([el[0][scoreX[0]]]);

    var el = filterBeforeDiff([findInputElement('').filter((it) => filterYaxis(it, yline))], yline);
    var scoreX = diffXY(el, yline, [{ element: 'input', value: "''", nick: 'envName' }]);
    const envName = el[0][scoreX[0]];
    if (!envName) {
      throw new Error("Can't find the element: envName");
    }
    envName.setAttribute('data-e2e-id', 'wyqdlb');
    highlightElement(envName);

    yline = countYline([el[0][scoreX[0]]]);

    var el = filterBeforeDiff([findTextElement('前置URL').filter((it) => filterYaxis(it, yline))], yline);
    var scoreX = diffXY(el, yline, [{ element: 'label', value: "'前置URL'", nick: '' }]);

    yline = countYline([el[0][scoreX[0]]]);

    var el = filterBeforeDiff([findInputElement('').filter((it) => filterYaxis(it, yline))], yline);
    var scoreX = diffXY(el, yline, [{ element: 'input', value: "''", nick: 'envUrl' }]);
    const envUrl = el[0][scoreX[0]];
    if (!envUrl) {
      throw new Error("Can't find the element: envUrl");
    }
    envUrl.setAttribute('data-e2e-id', 'efl62n');
    highlightElement(envUrl);

    yline = countYline([el[0][scoreX[0]]]);

    var el = filterBeforeDiff(
      [
        findTextElement('环境变量：在接口文档或测试的过程中，使用{{变量名}}即可引用该环境变量').filter((it) =>
          filterYaxis(it, yline)
        ),
      ],
      yline
    );
    var scoreX = diffXY(el, yline, [
      {
        element: 'label',
        value: "'环境变量：在接口文档或测试的过程中，使用{{变量名}}即可引用该环境变量'",
        nick: '',
      },
    ]);

    yline = countYline([el[0][scoreX[0]]]);

    var el = filterBeforeDiff(
      [
        findInputElement('').filter((it) => filterYaxis(it, yline)),
        findInputElement('').filter((it) => filterYaxis(it, yline)),
        findInputElement('').filter((it) => filterYaxis(it, yline)),
      ],
      yline
    );
    var scoreX = diffXY(el, yline, [
      { element: 'input', value: "''", nick: 'name' },
      { element: 'input', value: "''", nick: 'value' },
      { element: 'input', value: "''", nick: 'des' },
    ]);
    const name = el[0][scoreX[0]];
    if (!name) {
      throw new Error("Can't find the element: name");
    }
    name.setAttribute('data-e2e-id', 'lpsnvi');
    highlightElement(name);

    const value = el[1][scoreX[1]];
    if (!value) {
      throw new Error("Can't find the element: value");
    }
    value.setAttribute('data-e2e-id', '7abemj');
    highlightElement(value);

    const des = el[2][scoreX[2]];
    if (!des) {
      throw new Error("Can't find the element: des");
    }
    des.setAttribute('data-e2e-id', 'y81k18');
    highlightElement(des);

    yline = countYline([el[0][scoreX[0]], el[1][scoreX[1]], el[2][scoreX[2]]]);

    var el = filterBeforeDiff(
      [
        findButtonElement('保存').filter((it) => filterYaxis(it, yline)),
        findButtonElement('取消').filter((it) => filterYaxis(it, yline)),
      ],
      yline
    );
    var scoreX = diffXY(el, yline, [
      { element: 'button', value: "'保存'", nick: 'save' },
      { element: 'button', value: "'取消'", nick: 'cancel' },
    ]);
    const save = el[0][scoreX[0]];
    if (!save) {
      throw new Error("Can't find the element: save");
    }
    save.setAttribute('data-e2e-id', 'n4e2rs');
    highlightElement(save);

    const cancel = el[1][scoreX[1]];
    if (!cancel) {
      throw new Error("Can't find the element: cancel");
    }
    cancel.setAttribute('data-e2e-id', 'kzy6be');
    highlightElement(cancel);

    yline = countYline([el[0][scoreX[0]], el[1][scoreX[1]]]);

    return null;
  });
  var jjj = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='08mgfj']"));
  var envName = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='wyqdlb']"));
  var envUrl = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='efl62n']"));
  var name = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='lpsnvi']"));
  var value = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='7abemj']"));
  var des = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='y81k18']"));
  var save = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='n4e2rs']"));
  var cancel = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='kzy6be']"));

  await envName.hover();
  await envName.focus();
  await envName.fill('环境名称A');

  await envUrl.hover();
  await envUrl.focus();
  await envUrl.fill('http://www.youtube.com');

  await name.hover();
  await name.focus();
  await name.fill('AA');
  await save.click();

  // * 等待 600 毫秒
  await wait(600);
  await cancel.click();
  await sel.click();
  await wait(200);
  const atyi8fk = await page.locator('text=环境名称A');
  await atyi8fk.hover();
  await atyi8fk.click();

  // * 等待 600 毫秒
  await wait(600);

  await page.evaluateHandle(async () => {
    const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    await wait(500);

    let yline = 0;

    const findJSPathElement = (path) => {
      if (!path) {
        throw new Error('No JSPath');
      }
      return [document.querySelector(path)];
    };
    const findSelectElement = (label = '') => {
      const select = Array.from(document.querySelectorAll('select'));
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value.includes(label));
      return select.concat(input);
    };
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) => it.innerText.includes(label));
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label));
      return btn.concat(input);
    };
    const findInputElement = (value = '') => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value === value);
    };
    const findTextElement = (label = null) => {
      if (!label) {
        throw new Error("Function findtextElement has' t no args.");
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.indexOf(label) >= 0);
    };
    const findImgElement = () => {
      const svg = Array.from(document.getElementsByTagName('svg'));
      const img = Array.from(document.getElementsByTagName('img'));
      return svg.concat(img);
    };

    const highlightElement = (el, { color } = {}) => {
      const { left, width, height, top } = el.getBoundingClientRect();
      const div = document.createElement('div');
      div.style.position = 'fixed';
      div.style.left = left + 'px';
      div.style.top = top - 3 + 'px';
      div.style.height = height + 'px';
      div.style.width = width + 'px';
      div.style.border = `3px solid ${color || '#a22041'}`;
      div.style.zIndex = 99999;
      div.style.pointerEvents = 'none';
      document.body.appendChild(div);
      setTimeout(() => {
        document.body.removeChild(div);
      }, 300);
    };

    const getElementCoor = (el, coor) => {
      if (!el) {
        throw new Error('element is undefined or null.');
      }
      const { left, right, top, bottom } = el.getBoundingClientRect();
      if (coor === 'center') {
        return left + (right - left);
      }
      if (coor === 'middle') {
        return top + (bottom - top);
      }
      if (coor === 'left') {
        return left;
      }
      if (coor === 'right') {
        return right;
      }
    };
    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().right;
    };
    const distanceY = (a, b) => {
      return Math.abs(getElementCoor(a, 'middle') - getElementCoor(b, 'middle'));
    };
    const filterYaxis = (el, line) => {
      const { top, width, height } = el.getBoundingClientRect();
      if (width === 0 || height === 0) {
        return false;
      }
      return top > line;
    };
    const countYline = (list) => {
      const len = list.length;
      return (
        list
          .map((it) => {
            const { top, bottom } = it.getBoundingClientRect();
            return top + (bottom - top);
          })
          .reduce((a, b) => a + b) / len
      );
    };

    const filterBeforeDiff = (list, yline) => {
      if (list.length === 1) {
        return list;
      }
      const cache = list.map((it) => {
        return it
          .sort((a, b) => {
            const left1 = getElementCoor(a, 'left');
            const left2 = getElementCoor(b, 'left');
            return left1 - left2;
          })
          .filter((item) => getElementCoor(item, 'middle') > yline);
      });
      let left = getElementCoor(cache[0][0], 'left');
      const cacheFilterLeft = cache.map((it, index) => {
        if (it.length === 1 || index === 0) {
          return it;
        }
        const res = it.filter((item) => getElementCoor(item, 'left') > left);
        left = getElementCoor(res[0], 'left');
        return res;
      });
      let right = getElementCoor(cacheFilterLeft.slice(-1)[0].slice(-1)[0], 'right');
      const result = cacheFilterLeft
        .reverse()
        .map((it, index) => {
          if (it.length === 1 || index === 0) {
            return it;
          }
          const res = it.filter((item) => getElementCoor(item, 'right') < right);
          right = getElementCoor(res.slice(-1)[0], 'right');
          return res;
        })
        .reverse();
      return result;
    };
    const diffXY = (list, yline, data) => {
      if (list.length === 0) {
        throw new Error("Has't any element in args");
      }
      const score = list.map((it) => Array(it.length).fill(0));
      if (list.length === 1) {
        if (list[0].length === 0) {
          console.log('diffXY', data);
          throw new Error(
            '\u4F60\u4F20\u5165\u4E86\u7A7A\u6570\u7EC4\uFF0C\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u5143\u7D20'
          );
        }
        if (list[0].length === 1) {
          return [0];
        }
      }
      const scoreList = ['DOM', 'Yline', 'Y', 'X'];
      scoreList.forEach((itm, itIndex) => {
        let scoreUnit = itIndex + 1;
        let index = 0;
        if (itm === 'Yline') {
          let scoreCache = 1;
          let distanceCache = 0;
          list.forEach((item, index2) => {
            item.forEach((it, i) => {
              const distance = it.getBoundingClientRect().top - yline;
              if (distance > 0) {
                if (distanceCache === 0) {
                  distanceCache = distance;
                }
                if (distance <= distanceCache) {
                  distanceCache = distance;
                  score[index2][i] += scoreCache;
                  scoreCache++;
                }
              }
            });
          });
        }
        if (itm === 'Y') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2);
            let distanceCache = 0;
            aList.forEach((left, i) => {
              let scoreCache = 1;
              bList.forEach((right, j) => {
                const distance = distanceY(left, right);
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance;
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance;
                    score[index][i] += scoreCache;
                    score[index + 1][j] += scoreCache;
                    scoreCache += 1;
                  }
                }
              });
            });
            index++;
          }
        }
        if (itm === 'X') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2);
            let distanceCache = 0;
            let scoreCache = 1;
            aList.forEach((left, i) => {
              bList.forEach((right, j) => {
                const distance = distanceX(left, right);
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance;
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance;
                    score[index][i] += scoreCache * scoreUnit;
                    score[index + 1][j] += scoreCache * scoreUnit;
                    scoreCache += 1;
                  }
                }
              });
            });
            index++;
          }
        }
      });
      const findTarget = (list2) => list2.indexOf(Math.max(...list2));
      return score.map(findTarget);
    };

    var el = filterBeforeDiff(
      [findTextElement('http://www.youtube.com').filter((it) => filterYaxis(it, yline))],
      yline
    );
    var scoreX = diffXY(el, yline, [{ element: 'label', value: "'http://www.youtube.com'", nick: 'url' }]);
    const url = el[0][scoreX[0]];
    if (!url) {
      throw new Error("Can't find the element: url");
    }
    url.setAttribute('data-e2e-id', 'ogtegm');
    highlightElement(url);

    yline = countYline([el[0][scoreX[0]]]);

    return null;
  });
  var url = await page.evaluateHandle(() => document.querySelector("[data-e2e-id='ogtegm']"));

  // * 测试完成，关闭浏览器

  await context.close();
  await browser.close();
})();
