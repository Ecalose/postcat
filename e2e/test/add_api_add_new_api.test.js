/*
 * DO NOT EDIT!
 * This file was automatically generated by ark.
 */

const { chromium } = require('playwright')
const { test, expect } = require('@playwright/test')

;(async () => {
  const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms))

  const browser = await chromium.launch({
    headless: false,
    devtools: false
  })
  const context = await browser.newContext()
  // * 打开新标签页
  const page = await context.newPage()

  // * 跳转至该地址: http://localhost:4200
  await page.goto('http://localhost:4200')

  await page.evaluateHandle(async () => {
    const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms))
    await wait(500)

    let yline = 0

    const findJSPathElement = (path) => {
      if (!path) {
        throw new Error('No JSPath')
      }
      return [document.querySelector(path)]
    }
    const findSelectElement = (label = '') => {
      const select = Array.from(document.querySelectorAll('select'))
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.type !== 'radio')
        .filter((it) => it.value.indexOf(label.trim()) >= 0)
      const other = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.textContent.trim() === label.trim())
      return select.concat(input).concat(other)
    }
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) =>
        it.innerText.includes(label)
      )
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label))
      return btn.concat(input)
    }
    const findInputElement = (value = '') => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value === value)
    }
    const findTextElement = (label = null) => {
      if (!label) {
        throw new Error("Function findtextElement has' t no args.")
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
    }
    const findImgElement = () => {
      const svg = Array.from(document.getElementsByTagName('svg'))
      const img = Array.from(document.getElementsByTagName('img'))
      return svg.concat(img)
    }

    const highlightElement = (el, { color } = {}) => {
      const { left, width, height, top } = el.getBoundingClientRect()
      const div = document.createElement('div')
      div.style.position = 'fixed'
      div.style.left = left + 'px'
      div.style.top = top - 3 + 'px'
      div.style.height = height + 'px'
      div.style.width = width + 'px'
      div.style.border = `3px solid ${color || '#a22041'}`
      div.style.zIndex = 99999
      div.style.pointerEvents = 'none'
      document.body.appendChild(div)
      setTimeout(() => {
        document.body.removeChild(div)
      }, 300)
    }

    const getElementCoor = (el, coor) => {
      if (!el) {
        throw new Error('element is undefined or null.')
      }
      const { left, right, top, bottom } = el.getBoundingClientRect()
      if (coor === 'center') {
        return left + (right - left)
      }
      if (coor === 'middle') {
        return top + (bottom - top)
      }
      if (coor === 'left') {
        return left
      }
      if (coor === 'right') {
        return right
      }
    }
    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().right
    }
    const distanceY = (a, b) => {
      return Math.abs(getElementCoor(a, 'middle') - getElementCoor(b, 'middle'))
    }
    const filterYaxis = (el, line) => {
      const { top, width, height } = el.getBoundingClientRect()
      if (width === 0 || height === 0) {
        return false
      }
      return top > line
    }
    const countYline = (list) => {
      const len = list.length
      return (
        list
          .map((it) => {
            const { top, bottom } = it.getBoundingClientRect()
            return top + (bottom - top)
          })
          .reduce((a, b) => a + b) / len
      )
    }

    const filterBeforeDiff = (list, yline) => {
      if (list.length === 1) {
        return list
      }
      console.log('====>', list)
      const cache = list.map((it) => {
        return it
          .sort((a, b) => {
            const left1 = getElementCoor(a, 'left')
            const left2 = getElementCoor(b, 'left')
            return left1 - left2
          })
          .filter((item) => getElementCoor(item, 'middle') > yline)
      })
      console.log('===>', cache)
      let left = getElementCoor(cache[0][0], 'left')
      const cacheFilterLeft = cache.map((it, index) => {
        if (it.length === 1 || index === 0) {
          return it
        }
        const res = it.filter((item) => getElementCoor(item, 'left') > left)
        left = getElementCoor(res[0], 'left')
        return res
      })
      let right = getElementCoor(
        cacheFilterLeft.slice(-1)[0].slice(-1)[0],
        'right'
      )
      console.log('==>', cacheFilterLeft)
      const result = cacheFilterLeft
        .reverse()
        .map((it, index) => {
          if (it.length === 1 || index === 0) {
            return it
          }
          const res = it.filter((item) => getElementCoor(item, 'right') < right)
          right = getElementCoor(res.slice(-1)[0], 'right')
          return res
        })
        .reverse()
      console.log('=>', result)
      return result
    }
    const diffXY = (list, yline, data) => {
      console.log('=>', list)
      if (list.length === 0) {
        throw new Error("Has't any element in args")
      }
      const score = list.map((it) => Array(it.length).fill(0))
      if (list.length === 1) {
        if (list[0].length === 0) {
          console.log('diffXY', data)
          throw new Error(
            '\u4F60\u4F20\u5165\u4E86\u7A7A\u6570\u7EC4\uFF0C\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u5143\u7D20'
          )
        }
        if (list[0].length === 1) {
          return [0]
        }
      }
      const scoreList = ['DOM', 'Yline', 'Y', 'X']
      scoreList.forEach((itm, itIndex) => {
        let scoreUnit = itIndex + 1
        let index = 0
        if (itm === 'Yline') {
          let scoreCache = 1
          let distanceCache = 0
          list.forEach((item, index2) => {
            item.forEach((it, i) => {
              const distance = it.getBoundingClientRect().top - yline
              if (distance > 0) {
                if (distanceCache === 0) {
                  distanceCache = distance
                }
                if (distance <= distanceCache) {
                  distanceCache = distance
                  score[index2][i] += scoreCache
                  scoreCache++
                }
              }
            })
          })
        }
        if (itm === 'Y') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            aList.forEach((left, i) => {
              let scoreCache = 1
              bList.forEach((right, j) => {
                const distance = distanceY(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache
                    score[index + 1][j] += scoreCache
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
        if (itm === 'X') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            let scoreCache = 1
            aList.forEach((left, i) => {
              bList.forEach((right, j) => {
                const distance = distanceX(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache * scoreUnit
                    score[index + 1][j] += scoreCache * scoreUnit
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
      })
      console.log(JSON.stringify(score))
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return score.map(findTarget)
    }
    const diffAround = (el, label) => {
      const list = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
      const score = Array(list.length).fill(0)
      let xCache = 0,
        yCache = 0
      const targetX = getElementCoor(el, 'center')
      const targetY = getElementCoor(el, 'middle')
      list.forEach((it, i) => {
        const x = Math.abs(targetX - getElementCoor(it, 'center'))
        const y = Math.abs(targetY - getElementCoor(it, 'middle'))
        console.log(x, y)
        if (xCache === 0) {
          xCache = x
          score[i] += i + 1
        }
        if (x < xCache) {
          xCache = x
          score[i] += i + 1
        }
        if (yCache === 0) {
          yCache = y
          score[i] += i + 1
        }
        if (y < yCache) {
          yCache = y
          score[i] += i + 1
        }
      })
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return list[findTarget(score)]
    }

    var el = filterBeforeDiff(
      [
        findInputElement().filter((it) => filterYaxis(it, yline)),
        findImgElement().filter((it) => filterYaxis(it, yline)),
        findTextElement('API').filter((it) => filterYaxis(it, yline)),
        findImgElement().filter((it) => filterYaxis(it, yline))
      ],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'input', value: '', nick: '' },
      { element: 'img', value: '', nick: '' },
      { element: 'label', value: "'API'", nick: 'btn' },
      { element: 'img', value: '', nick: '' }
    ])

    const btn = el[2][scoreX[2]]
    if (!btn) {
      throw new Error("Can't find the element: btn")
    }
    btn.setAttribute('data-e2e-id', 'i3p9gb')
    highlightElement(btn)

    yline = countYline([
      el[0][scoreX[0]],
      el[1][scoreX[1]],
      el[2][scoreX[2]],
      el[3][scoreX[3]]
    ])

    return null
  })
  var btn = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='i3p9gb']")
  )

  await btn.click()

  await page.evaluateHandle(async () => {
    const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms))
    await wait(500)

    let yline = 0

    const findJSPathElement = (path) => {
      if (!path) {
        throw new Error('No JSPath')
      }
      return [document.querySelector(path)]
    }
    const findSelectElement = (label = '') => {
      const select = Array.from(document.querySelectorAll('select'))
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.type !== 'radio')
        .filter((it) => it.value.indexOf(label.trim()) >= 0)
      const other = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.textContent.trim() === label.trim())
      return select.concat(input).concat(other)
    }
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) =>
        it.innerText.includes(label)
      )
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label))
      return btn.concat(input)
    }
    const findInputElement = (value = '') => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value === value)
    }
    const findTextElement = (label = null) => {
      if (!label) {
        throw new Error("Function findtextElement has' t no args.")
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
    }
    const findImgElement = () => {
      const svg = Array.from(document.getElementsByTagName('svg'))
      const img = Array.from(document.getElementsByTagName('img'))
      return svg.concat(img)
    }

    const highlightElement = (el, { color } = {}) => {
      const { left, width, height, top } = el.getBoundingClientRect()
      const div = document.createElement('div')
      div.style.position = 'fixed'
      div.style.left = left + 'px'
      div.style.top = top - 3 + 'px'
      div.style.height = height + 'px'
      div.style.width = width + 'px'
      div.style.border = `3px solid ${color || '#a22041'}`
      div.style.zIndex = 99999
      div.style.pointerEvents = 'none'
      document.body.appendChild(div)
      setTimeout(() => {
        document.body.removeChild(div)
      }, 300)
    }

    const getElementCoor = (el, coor) => {
      if (!el) {
        throw new Error('element is undefined or null.')
      }
      const { left, right, top, bottom } = el.getBoundingClientRect()
      if (coor === 'center') {
        return left + (right - left)
      }
      if (coor === 'middle') {
        return top + (bottom - top)
      }
      if (coor === 'left') {
        return left
      }
      if (coor === 'right') {
        return right
      }
    }
    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().right
    }
    const distanceY = (a, b) => {
      return Math.abs(getElementCoor(a, 'middle') - getElementCoor(b, 'middle'))
    }
    const filterYaxis = (el, line) => {
      const { top, width, height } = el.getBoundingClientRect()
      if (width === 0 || height === 0) {
        return false
      }
      return top > line
    }
    const countYline = (list) => {
      const len = list.length
      return (
        list
          .map((it) => {
            const { top, bottom } = it.getBoundingClientRect()
            return top + (bottom - top)
          })
          .reduce((a, b) => a + b) / len
      )
    }

    const filterBeforeDiff = (list, yline) => {
      if (list.length === 1) {
        return list
      }
      console.log('====>', list)
      const cache = list.map((it) => {
        return it
          .sort((a, b) => {
            const left1 = getElementCoor(a, 'left')
            const left2 = getElementCoor(b, 'left')
            return left1 - left2
          })
          .filter((item) => getElementCoor(item, 'middle') > yline)
      })
      console.log('===>', cache)
      let left = getElementCoor(cache[0][0], 'left')
      const cacheFilterLeft = cache.map((it, index) => {
        if (it.length === 1 || index === 0) {
          return it
        }
        const res = it.filter((item) => getElementCoor(item, 'left') > left)
        left = getElementCoor(res[0], 'left')
        return res
      })
      let right = getElementCoor(
        cacheFilterLeft.slice(-1)[0].slice(-1)[0],
        'right'
      )
      console.log('==>', cacheFilterLeft)
      const result = cacheFilterLeft
        .reverse()
        .map((it, index) => {
          if (it.length === 1 || index === 0) {
            return it
          }
          const res = it.filter((item) => getElementCoor(item, 'right') < right)
          right = getElementCoor(res.slice(-1)[0], 'right')
          return res
        })
        .reverse()
      console.log('=>', result)
      return result
    }
    const diffXY = (list, yline, data) => {
      console.log('=>', list)
      if (list.length === 0) {
        throw new Error("Has't any element in args")
      }
      const score = list.map((it) => Array(it.length).fill(0))
      if (list.length === 1) {
        if (list[0].length === 0) {
          console.log('diffXY', data)
          throw new Error(
            '\u4F60\u4F20\u5165\u4E86\u7A7A\u6570\u7EC4\uFF0C\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u5143\u7D20'
          )
        }
        if (list[0].length === 1) {
          return [0]
        }
      }
      const scoreList = ['DOM', 'Yline', 'Y', 'X']
      scoreList.forEach((itm, itIndex) => {
        let scoreUnit = itIndex + 1
        let index = 0
        if (itm === 'Yline') {
          let scoreCache = 1
          let distanceCache = 0
          list.forEach((item, index2) => {
            item.forEach((it, i) => {
              const distance = it.getBoundingClientRect().top - yline
              if (distance > 0) {
                if (distanceCache === 0) {
                  distanceCache = distance
                }
                if (distance <= distanceCache) {
                  distanceCache = distance
                  score[index2][i] += scoreCache
                  scoreCache++
                }
              }
            })
          })
        }
        if (itm === 'Y') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            aList.forEach((left, i) => {
              let scoreCache = 1
              bList.forEach((right, j) => {
                const distance = distanceY(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache
                    score[index + 1][j] += scoreCache
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
        if (itm === 'X') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            let scoreCache = 1
            aList.forEach((left, i) => {
              bList.forEach((right, j) => {
                const distance = distanceX(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache * scoreUnit
                    score[index + 1][j] += scoreCache * scoreUnit
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
      })
      console.log(JSON.stringify(score))
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return score.map(findTarget)
    }
    const diffAround = (el, label) => {
      const list = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
      const score = Array(list.length).fill(0)
      let xCache = 0,
        yCache = 0
      const targetX = getElementCoor(el, 'center')
      const targetY = getElementCoor(el, 'middle')
      list.forEach((it, i) => {
        const x = Math.abs(targetX - getElementCoor(it, 'center'))
        const y = Math.abs(targetY - getElementCoor(it, 'middle'))
        console.log(x, y)
        if (xCache === 0) {
          xCache = x
          score[i] += i + 1
        }
        if (x < xCache) {
          xCache = x
          score[i] += i + 1
        }
        if (yCache === 0) {
          yCache = y
          score[i] += i + 1
        }
        if (y < yCache) {
          yCache = y
          score[i] += i + 1
        }
      })
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return list[findTarget(score)]
    }

    var el = filterBeforeDiff(
      [findButtonElement('保存').filter((it) => filterYaxis(it, yline))],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'button', value: "'保存'", nick: 'save' }
    ])
    const save = el[0][scoreX[0]]
    if (!save) {
      throw new Error("Can't find the element: save")
    }
    save.setAttribute('data-e2e-id', 'duqutd')
    highlightElement(save)

    yline = countYline([el[0][scoreX[0]]])

    var el = filterBeforeDiff(
      [findTextElement('API Path').filter((it) => filterYaxis(it, yline))],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'label', value: "'API Path'", nick: '' }
    ])

    yline = countYline([el[0][scoreX[0]]])

    var el = filterBeforeDiff(
      [
        findSelectElement('HTTP').filter((it) => filterYaxis(it, yline)),
        findSelectElement('POST').filter((it) => filterYaxis(it, yline)),
        findInputElement('/').filter((it) => filterYaxis(it, yline))
      ],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'select', value: "'HTTP'", nick: 'protocol' },
      { element: 'select', value: "'POST'", nick: 'type' },
      { element: 'input', value: "'/'", nick: 'url' }
    ])
    const protocol = el[0][scoreX[0]]
    if (!protocol) {
      throw new Error("Can't find the element: protocol")
    }
    protocol.setAttribute('data-e2e-id', 'oupwwh')
    highlightElement(protocol)

    const type = el[1][scoreX[1]]
    if (!type) {
      throw new Error("Can't find the element: type")
    }
    type.setAttribute('data-e2e-id', 'gaijzt')
    highlightElement(type)

    const url = el[2][scoreX[2]]
    if (!url) {
      throw new Error("Can't find the element: url")
    }
    url.setAttribute('data-e2e-id', 'indcw4')
    highlightElement(url)

    yline = countYline([el[0][scoreX[0]], el[1][scoreX[1]], el[2][scoreX[2]]])

    var el = filterBeforeDiff(
      [
        findTextElement('分组 / API 名称').filter((it) =>
          filterYaxis(it, yline)
        )
      ],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'label', value: "'分组 / API 名称'", nick: '' }
    ])

    yline = countYline([el[0][scoreX[0]]])

    var el = filterBeforeDiff(
      [
        findTextElement('根目录').filter((it) => filterYaxis(it, yline)),
        findInputElement().filter((it) => filterYaxis(it, yline))
      ],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'label', value: "'根目录'", nick: '' },
      { element: 'input', value: '', nick: 'name' }
    ])

    const name = el[1][scoreX[1]]
    if (!name) {
      throw new Error("Can't find the element: name")
    }
    name.setAttribute('data-e2e-id', 'pacdzk')
    highlightElement(name)

    yline = countYline([el[0][scoreX[0]], el[1][scoreX[1]]])

    return null
  })
  var save = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='duqutd']")
  )
  var protocol = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='oupwwh']")
  )
  var type = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='gaijzt']")
  )
  var url = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='indcw4']")
  )
  var name = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='pacdzk']")
  )

  await type.click()
  await wait(200)
  const a31ap6s = await page.evaluateHandle(async () => {
    let yline = 0

    const findJSPathElement = (path) => {
      if (!path) {
        throw new Error('No JSPath')
      }
      return [document.querySelector(path)]
    }
    const findSelectElement = (label = '') => {
      const select = Array.from(document.querySelectorAll('select'))
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.type !== 'radio')
        .filter((it) => it.value.indexOf(label.trim()) >= 0)
      const other = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.textContent.trim() === label.trim())
      return select.concat(input).concat(other)
    }
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) =>
        it.innerText.includes(label)
      )
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label))
      return btn.concat(input)
    }
    const findInputElement = (value = '') => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value === value)
    }
    const findTextElement = (label = null) => {
      if (!label) {
        throw new Error("Function findtextElement has' t no args.")
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
    }
    const findImgElement = () => {
      const svg = Array.from(document.getElementsByTagName('svg'))
      const img = Array.from(document.getElementsByTagName('img'))
      return svg.concat(img)
    }

    const highlightElement = (el, { color } = {}) => {
      const { left, width, height, top } = el.getBoundingClientRect()
      const div = document.createElement('div')
      div.style.position = 'fixed'
      div.style.left = left + 'px'
      div.style.top = top - 3 + 'px'
      div.style.height = height + 'px'
      div.style.width = width + 'px'
      div.style.border = `3px solid ${color || '#a22041'}`
      div.style.zIndex = 99999
      div.style.pointerEvents = 'none'
      document.body.appendChild(div)
      setTimeout(() => {
        document.body.removeChild(div)
      }, 300)
    }

    const getElementCoor = (el, coor) => {
      if (!el) {
        throw new Error('element is undefined or null.')
      }
      const { left, right, top, bottom } = el.getBoundingClientRect()
      if (coor === 'center') {
        return left + (right - left)
      }
      if (coor === 'middle') {
        return top + (bottom - top)
      }
      if (coor === 'left') {
        return left
      }
      if (coor === 'right') {
        return right
      }
    }
    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().right
    }
    const distanceY = (a, b) => {
      return Math.abs(getElementCoor(a, 'middle') - getElementCoor(b, 'middle'))
    }
    const filterYaxis = (el, line) => {
      const { top, width, height } = el.getBoundingClientRect()
      if (width === 0 || height === 0) {
        return false
      }
      return top > line
    }
    const countYline = (list) => {
      const len = list.length
      return (
        list
          .map((it) => {
            const { top, bottom } = it.getBoundingClientRect()
            return top + (bottom - top)
          })
          .reduce((a, b) => a + b) / len
      )
    }

    const filterBeforeDiff = (list, yline) => {
      if (list.length === 1) {
        return list
      }
      console.log('====>', list)
      const cache = list.map((it) => {
        return it
          .sort((a, b) => {
            const left1 = getElementCoor(a, 'left')
            const left2 = getElementCoor(b, 'left')
            return left1 - left2
          })
          .filter((item) => getElementCoor(item, 'middle') > yline)
      })
      console.log('===>', cache)
      let left = getElementCoor(cache[0][0], 'left')
      const cacheFilterLeft = cache.map((it, index) => {
        if (it.length === 1 || index === 0) {
          return it
        }
        const res = it.filter((item) => getElementCoor(item, 'left') > left)
        left = getElementCoor(res[0], 'left')
        return res
      })
      let right = getElementCoor(
        cacheFilterLeft.slice(-1)[0].slice(-1)[0],
        'right'
      )
      console.log('==>', cacheFilterLeft)
      const result = cacheFilterLeft
        .reverse()
        .map((it, index) => {
          if (it.length === 1 || index === 0) {
            return it
          }
          const res = it.filter((item) => getElementCoor(item, 'right') < right)
          right = getElementCoor(res.slice(-1)[0], 'right')
          return res
        })
        .reverse()
      console.log('=>', result)
      return result
    }
    const diffXY = (list, yline, data) => {
      console.log('=>', list)
      if (list.length === 0) {
        throw new Error("Has't any element in args")
      }
      const score = list.map((it) => Array(it.length).fill(0))
      if (list.length === 1) {
        if (list[0].length === 0) {
          console.log('diffXY', data)
          throw new Error(
            '\u4F60\u4F20\u5165\u4E86\u7A7A\u6570\u7EC4\uFF0C\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u5143\u7D20'
          )
        }
        if (list[0].length === 1) {
          return [0]
        }
      }
      const scoreList = ['DOM', 'Yline', 'Y', 'X']
      scoreList.forEach((itm, itIndex) => {
        let scoreUnit = itIndex + 1
        let index = 0
        if (itm === 'Yline') {
          let scoreCache = 1
          let distanceCache = 0
          list.forEach((item, index2) => {
            item.forEach((it, i) => {
              const distance = it.getBoundingClientRect().top - yline
              if (distance > 0) {
                if (distanceCache === 0) {
                  distanceCache = distance
                }
                if (distance <= distanceCache) {
                  distanceCache = distance
                  score[index2][i] += scoreCache
                  scoreCache++
                }
              }
            })
          })
        }
        if (itm === 'Y') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            aList.forEach((left, i) => {
              let scoreCache = 1
              bList.forEach((right, j) => {
                const distance = distanceY(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache
                    score[index + 1][j] += scoreCache
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
        if (itm === 'X') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            let scoreCache = 1
            aList.forEach((left, i) => {
              bList.forEach((right, j) => {
                const distance = distanceX(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache * scoreUnit
                    score[index + 1][j] += scoreCache * scoreUnit
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
      })
      console.log(JSON.stringify(score))
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return score.map(findTarget)
    }
    const diffAround = (el, label) => {
      const list = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
      const score = Array(list.length).fill(0)
      let xCache = 0,
        yCache = 0
      const targetX = getElementCoor(el, 'center')
      const targetY = getElementCoor(el, 'middle')
      list.forEach((it, i) => {
        const x = Math.abs(targetX - getElementCoor(it, 'center'))
        const y = Math.abs(targetY - getElementCoor(it, 'middle'))
        console.log(x, y)
        if (xCache === 0) {
          xCache = x
          score[i] += i + 1
        }
        if (x < xCache) {
          xCache = x
          score[i] += i + 1
        }
        if (yCache === 0) {
          yCache = y
          score[i] += i + 1
        }
        if (y < yCache) {
          yCache = y
          score[i] += i + 1
        }
      })
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return list[findTarget(score)]
    }

    const select = document.querySelector("[data-e2e-id='gaijzt']")
    const option = diffAround(select, 'GET')
    highlightElement(option)
    return option
  })
  await a31ap6s.hover()
  await a31ap6s.click()

  await name.hover()
  await name.focus()
  await name.fill('新Get接口')
  await wait(200)

  await url.hover()
  await url.focus()
  await url.fill('https://m.weibo.cn/api/container/getIndex')
  await wait(200)
  await save.click()

  await page.evaluateHandle(async () => {
    const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms))
    await wait(500)

    let yline = 0

    const findJSPathElement = (path) => {
      if (!path) {
        throw new Error('No JSPath')
      }
      return [document.querySelector(path)]
    }
    const findSelectElement = (label = '') => {
      const select = Array.from(document.querySelectorAll('select'))
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.type !== 'radio')
        .filter((it) => it.value.indexOf(label.trim()) >= 0)
      const other = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.textContent.trim() === label.trim())
      return select.concat(input).concat(other)
    }
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) =>
        it.innerText.includes(label)
      )
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label))
      return btn.concat(input)
    }
    const findInputElement = (value = '') => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
        .filter((it) => it.value === value)
    }
    const findTextElement = (label = null) => {
      if (!label) {
        throw new Error("Function findtextElement has' t no args.")
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
    }
    const findImgElement = () => {
      const svg = Array.from(document.getElementsByTagName('svg'))
      const img = Array.from(document.getElementsByTagName('img'))
      return svg.concat(img)
    }

    const highlightElement = (el, { color } = {}) => {
      const { left, width, height, top } = el.getBoundingClientRect()
      const div = document.createElement('div')
      div.style.position = 'fixed'
      div.style.left = left + 'px'
      div.style.top = top - 3 + 'px'
      div.style.height = height + 'px'
      div.style.width = width + 'px'
      div.style.border = `3px solid ${color || '#a22041'}`
      div.style.zIndex = 99999
      div.style.pointerEvents = 'none'
      document.body.appendChild(div)
      setTimeout(() => {
        document.body.removeChild(div)
      }, 300)
    }

    const getElementCoor = (el, coor) => {
      if (!el) {
        throw new Error('element is undefined or null.')
      }
      const { left, right, top, bottom } = el.getBoundingClientRect()
      if (coor === 'center') {
        return left + (right - left)
      }
      if (coor === 'middle') {
        return top + (bottom - top)
      }
      if (coor === 'left') {
        return left
      }
      if (coor === 'right') {
        return right
      }
    }
    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().right
    }
    const distanceY = (a, b) => {
      return Math.abs(getElementCoor(a, 'middle') - getElementCoor(b, 'middle'))
    }
    const filterYaxis = (el, line) => {
      const { top, width, height } = el.getBoundingClientRect()
      if (width === 0 || height === 0) {
        return false
      }
      return top > line
    }
    const countYline = (list) => {
      const len = list.length
      return (
        list
          .map((it) => {
            const { top, bottom } = it.getBoundingClientRect()
            return top + (bottom - top)
          })
          .reduce((a, b) => a + b) / len
      )
    }

    const filterBeforeDiff = (list, yline) => {
      if (list.length === 1) {
        return list
      }
      console.log('====>', list)
      const cache = list.map((it) => {
        return it
          .sort((a, b) => {
            const left1 = getElementCoor(a, 'left')
            const left2 = getElementCoor(b, 'left')
            return left1 - left2
          })
          .filter((item) => getElementCoor(item, 'middle') > yline)
      })
      console.log('===>', cache)
      let left = getElementCoor(cache[0][0], 'left')
      const cacheFilterLeft = cache.map((it, index) => {
        if (it.length === 1 || index === 0) {
          return it
        }
        const res = it.filter((item) => getElementCoor(item, 'left') > left)
        left = getElementCoor(res[0], 'left')
        return res
      })
      let right = getElementCoor(
        cacheFilterLeft.slice(-1)[0].slice(-1)[0],
        'right'
      )
      console.log('==>', cacheFilterLeft)
      const result = cacheFilterLeft
        .reverse()
        .map((it, index) => {
          if (it.length === 1 || index === 0) {
            return it
          }
          const res = it.filter((item) => getElementCoor(item, 'right') < right)
          right = getElementCoor(res.slice(-1)[0], 'right')
          return res
        })
        .reverse()
      console.log('=>', result)
      return result
    }
    const diffXY = (list, yline, data) => {
      console.log('=>', list)
      if (list.length === 0) {
        throw new Error("Has't any element in args")
      }
      const score = list.map((it) => Array(it.length).fill(0))
      if (list.length === 1) {
        if (list[0].length === 0) {
          console.log('diffXY', data)
          throw new Error(
            '\u4F60\u4F20\u5165\u4E86\u7A7A\u6570\u7EC4\uFF0C\u65E0\u6CD5\u786E\u5B9A\u552F\u4E00\u5143\u7D20'
          )
        }
        if (list[0].length === 1) {
          return [0]
        }
      }
      const scoreList = ['DOM', 'Yline', 'Y', 'X']
      scoreList.forEach((itm, itIndex) => {
        let scoreUnit = itIndex + 1
        let index = 0
        if (itm === 'Yline') {
          let scoreCache = 1
          let distanceCache = 0
          list.forEach((item, index2) => {
            item.forEach((it, i) => {
              const distance = it.getBoundingClientRect().top - yline
              if (distance > 0) {
                if (distanceCache === 0) {
                  distanceCache = distance
                }
                if (distance <= distanceCache) {
                  distanceCache = distance
                  score[index2][i] += scoreCache
                  scoreCache++
                }
              }
            })
          })
        }
        if (itm === 'Y') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            aList.forEach((left, i) => {
              let scoreCache = 1
              bList.forEach((right, j) => {
                const distance = distanceY(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache
                    score[index + 1][j] += scoreCache
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
        if (itm === 'X') {
          while (index < list.length - 1) {
            const [aList, bList] = list.slice(index, index + 2)
            let distanceCache = 0
            let scoreCache = 1
            aList.forEach((left, i) => {
              bList.forEach((right, j) => {
                const distance = distanceX(left, right)
                if (distance > 0) {
                  if (distanceCache === 0) {
                    distanceCache = distance
                  }
                  if (distance <= distanceCache) {
                    distanceCache = distance
                    score[index][i] += scoreCache * scoreUnit
                    score[index + 1][j] += scoreCache * scoreUnit
                    scoreCache += 1
                  }
                }
              })
            })
            index++
          }
        }
      })
      console.log(JSON.stringify(score))
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return score.map(findTarget)
    }
    const diffAround = (el, label) => {
      const list = Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0 && it.innerText)
        .filter((it) => it.innerText.trim() === label.trim())
      const score = Array(list.length).fill(0)
      let xCache = 0,
        yCache = 0
      const targetX = getElementCoor(el, 'center')
      const targetY = getElementCoor(el, 'middle')
      list.forEach((it, i) => {
        const x = Math.abs(targetX - getElementCoor(it, 'center'))
        const y = Math.abs(targetY - getElementCoor(it, 'middle'))
        console.log(x, y)
        if (xCache === 0) {
          xCache = x
          score[i] += i + 1
        }
        if (x < xCache) {
          xCache = x
          score[i] += i + 1
        }
        if (yCache === 0) {
          yCache = y
          score[i] += i + 1
        }
        if (y < yCache) {
          yCache = y
          score[i] += i + 1
        }
      })
      const findTarget = (list2) => list2.indexOf(Math.max(...list2))
      return list[findTarget(score)]
    }

    var el = filterBeforeDiff(
      [
        findInputElement().filter((it) => filterYaxis(it, yline)),
        findImgElement().filter((it) => filterYaxis(it, yline)),
        findTextElement('API').filter((it) => filterYaxis(it, yline)),
        findImgElement().filter((it) => filterYaxis(it, yline))
      ],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'input', value: '', nick: '' },
      { element: 'img', value: '', nick: '' },
      { element: 'label', value: "'API'", nick: 'btn' },
      { element: 'img', value: '', nick: '' }
    ])

    const btn = el[2][scoreX[2]]
    if (!btn) {
      throw new Error("Can't find the element: btn")
    }
    btn.setAttribute('data-e2e-id', '06j1pk')
    highlightElement(btn)

    yline = countYline([
      el[0][scoreX[0]],
      el[1][scoreX[1]],
      el[2][scoreX[2]],
      el[3][scoreX[3]]
    ])

    var el = filterBeforeDiff(
      [findTextElement('新Get接口').filter((it) => filterYaxis(it, yline))],
      yline
    )
    var scoreX = diffXY(el, yline, [
      { element: 'label', value: "'新Get接口'", nick: 'target' }
    ])
    const target = el[0][scoreX[0]]
    if (!target) {
      throw new Error("Can't find the element: target")
    }
    target.setAttribute('data-e2e-id', 'nrk2mp')
    highlightElement(target)

    yline = countYline([el[0][scoreX[0]]])

    return null
  })
  var btn = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='06j1pk']")
  )
  var target = await page.evaluateHandle(() =>
    document.querySelector("[data-e2e-id='nrk2mp']")
  )

  // * 测试完成，关闭浏览器

  await context.close()
  await browser.close()
})()
