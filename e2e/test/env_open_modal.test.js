/*
 * DO NOT EDIT!
 * This file was automatically generated by ark.
 */

const { chromium } = require('playwright')

;(async () => {
  const wait = async (ms) => new Promise((resolve) => setTimeout(resolve, ms))

  const browser = await chromium.launch({
    headless: false
  })
  const context = await browser.newContext()
  // * 打开新标签页
  const page = await context.newPage()

  // * 跳转至该地址: localhost:4200
  await page.goto('localhost:4200')

  await page.evaluate(() => {
    const findButtonElement = (label = '') => {
      const btn = Array.from(document.querySelectorAll('button')).filter((it) =>
        it.innerHTML.includes(label)
      )
      const input = Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type === 'submit')
        .filter((it) => it.value.includes(label))
      return btn.concat(input)
    }

    const findInputElement = () => {
      return Array.from(document.querySelectorAll('input'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.type !== 'submit')
    }
    const findTextElement = (label = null) => {
      if (!label) {
        return new Error("Function findtextElement has' t no args.")
      }
      return Array.from(document.getElementsByTagName('*'))
        .filter((it) => it.type !== 'hidden')
        .filter((it) => it.style.display !== 'none')
        .filter((it) => it.children.length === 0)
        .filter((it) => it.textContent === label)
    }

    const highlightElement = (el) => {
      const { left, width, height, top } = el.getBoundingClientRect()
      const div = document.createElement('div')
      div.style.position = 'fixed'
      div.style.left = left + 'px'
      div.style.top = top - 3 + 'px'
      div.style.height = height + 'px'
      div.style.width = width + 'px'
      div.style.border = '3px solid red'
      div.style.zIndex = 999
      document.body.appendChild(div)
    }

    const distanceX = (a, b) => {
      return b.getBoundingClientRect().left - a.getBoundingClientRect().left
    }

    const diffX = (list) => {
      // console.log(list)
      const score = list.map((it) => Array(it.length).fill(0))
      if (list.length === 1) {
        if (list[0].length === 1) {
          return [0]
        }
        throw new Error('无法确定唯一元素')
      }
      let index = 0
      while (index < list.length - 1) {
        const [aList, bList] = list.slice(index, index + 2)
        let distanceCache = 0
        // let scoreCache = 0
        aList.forEach((left, i) => {
          bList.forEach((right, j) => {
            const distance = distanceX(left, right)
            if (distance > 0) {
              if (distanceCache === 0) {
                // * 如果 distanceCache 还没有值，则初始化
                distanceCache = distance
              }
              if (distance <= distanceCache) {
                score[index][i]++
                score[index + 1][j]++
              }
            }
          })
        })
        index++
      }
      // TODO: 检查如果积分一样，去按Y轴比较
      const findTarget = (list) => {
        const max = Math.max(...list)
        return list.indexOf(max)
      }
      return score.map(findTarget)
    }

    var el = [findButtonElement('发送'), findButtonElement()]
    var scoreX = diffX(el)
    const send = el[0][scoreX[0]]
    if (!send) {
      throw new Error("Can't find the element: send")
    }
    highlightElement(send)
    const saveApi = el[1][scoreX[1]]
    if (!saveApi) {
      throw new Error("Can't find the element: saveApi")
    }
    highlightElement(saveApi)
  })

  // * 截图
  await page.screenshot({ path: './img/截图1642430211637.png' })
  // * 测试完成，关闭浏览器

  await context.close()
  await browser.close()
})()
